name: Build and Deploy to Amazon ECS

# Define when the workflow should run
on:
  # push:
  #   branches:
  #     - development # Change this to the branch you want to trigger the workflow on
  workflow_dispatch:  

# Define environment variables used in the workflow
env:
  AWS_REGION: us-east-2                       # Set your preferred AWS region, e.g., us-west-1
  ECR_REPOSITORY: dev-backend-api             # Set your Amazon ECR repository name
  ECS_SERVICE: dev-backend-api                # Set your Amazon ECS service name
  ECS_CLUSTER: devcluster                     # Set your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json   # Set the path to your Amazon ECS task definition file
  CONTAINER_NAME: dev-backend-api             # Set the name of the container in your task definition

# Define permissions for accessing GitHub repository contents
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Copying env from GitHub secrets
      run: 'echo "$DEV_ENV" > "$FILE_PATH"'
      shell: bash
      env:
        DEV_ENV: ${{ secrets.DEV_ENV }}
        FILE_PATH: ./.env   

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.run_number }} 
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
     
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition dev-backend-api --query taskDefinition > task-definition.json 

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
